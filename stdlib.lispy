(def {nil} {})
(def {true} 1)
(def {false} 0)

(def {fun} (\ {args body} 
     {def (head args) (\ (tail args) body)}))


(fun {curry f l} {
  eval (join (list f) l)
})

(fun {uncurry f & xs} {f xs})

(fun {last l}
     {if (== (tail l) nil)
         {head l}
         {last (tail l)}})

(fun {do & l}
     {if (== l nil)
         {nil}
         {last l}})

(fun {scope block}
     {((\ {_} block) ())})

(fun {not x}   {- 1 x})
(fun {or x y}  {+ x y})
(fun {and x y} {* x y})

(fun {flip f a b} {f b a})
(fun {ghost & xs} {eval xs})
(fun {comp f g x} {f (g x)})

(fun {fst l} { eval (head l) })
(fun {snd l} { eval (head (tail l)) })
(fun {trd l} { eval (head (tail (tail l))) })


(fun {len l}
     {(if (== l nil) {0} {+ 1 (len (tail l))})})

(fun {nth n l} {
  if (== n 0)
    {fst l}
    {nth (- n 1) (tail l)}
})